// Code generated by Kitex v0.4.4. DO NOT EDIT.

package favoriteservice

import (
	"context"
	douyinfavorite "douyin/kitex_gen/douyinfavorite"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return favoriteServiceServiceInfo
}

var favoriteServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FavoriteService"
	handlerType := (*douyinfavorite.FavoriteService)(nil)
	methods := map[string]kitex.MethodInfo{
		"FavoriteAction":    kitex.NewMethodInfo(favoriteActionHandler, newFavoriteServiceFavoriteActionArgs, newFavoriteServiceFavoriteActionResult, false),
		"FavoriteList":      kitex.NewMethodInfo(favoriteListHandler, newFavoriteServiceFavoriteListArgs, newFavoriteServiceFavoriteListResult, false),
		"FavoriteJudge":     kitex.NewMethodInfo(favoriteJudgeHandler, newFavoriteServiceFavoriteJudgeArgs, newFavoriteServiceFavoriteJudgeResult, false),
		"FavoriteCountUser": kitex.NewMethodInfo(favoriteCountUserHandler, newFavoriteServiceFavoriteCountUserArgs, newFavoriteServiceFavoriteCountUserResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "douyinfavorite",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func favoriteActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*douyinfavorite.FavoriteServiceFavoriteActionArgs)
	realResult := result.(*douyinfavorite.FavoriteServiceFavoriteActionResult)
	success, err := handler.(douyinfavorite.FavoriteService).FavoriteAction(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceFavoriteActionArgs() interface{} {
	return douyinfavorite.NewFavoriteServiceFavoriteActionArgs()
}

func newFavoriteServiceFavoriteActionResult() interface{} {
	return douyinfavorite.NewFavoriteServiceFavoriteActionResult()
}

func favoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*douyinfavorite.FavoriteServiceFavoriteListArgs)
	realResult := result.(*douyinfavorite.FavoriteServiceFavoriteListResult)
	success, err := handler.(douyinfavorite.FavoriteService).FavoriteList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceFavoriteListArgs() interface{} {
	return douyinfavorite.NewFavoriteServiceFavoriteListArgs()
}

func newFavoriteServiceFavoriteListResult() interface{} {
	return douyinfavorite.NewFavoriteServiceFavoriteListResult()
}

func favoriteJudgeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*douyinfavorite.FavoriteServiceFavoriteJudgeArgs)
	realResult := result.(*douyinfavorite.FavoriteServiceFavoriteJudgeResult)
	success, err := handler.(douyinfavorite.FavoriteService).FavoriteJudge(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceFavoriteJudgeArgs() interface{} {
	return douyinfavorite.NewFavoriteServiceFavoriteJudgeArgs()
}

func newFavoriteServiceFavoriteJudgeResult() interface{} {
	return douyinfavorite.NewFavoriteServiceFavoriteJudgeResult()
}

func favoriteCountUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*douyinfavorite.FavoriteServiceFavoriteCountUserArgs)
	realResult := result.(*douyinfavorite.FavoriteServiceFavoriteCountUserResult)
	success, err := handler.(douyinfavorite.FavoriteService).FavoriteCountUser(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceFavoriteCountUserArgs() interface{} {
	return douyinfavorite.NewFavoriteServiceFavoriteCountUserArgs()
}

func newFavoriteServiceFavoriteCountUserResult() interface{} {
	return douyinfavorite.NewFavoriteServiceFavoriteCountUserResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FavoriteAction(ctx context.Context, request *douyinfavorite.DouyinFavoriteActionRequest) (r *douyinfavorite.DouyinFavoriteActionResponse, err error) {
	var _args douyinfavorite.FavoriteServiceFavoriteActionArgs
	_args.Request = request
	var _result douyinfavorite.FavoriteServiceFavoriteActionResult
	if err = p.c.Call(ctx, "FavoriteAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteList(ctx context.Context, request *douyinfavorite.DouyinFavoriteListRequest) (r *douyinfavorite.DouyinFavoriteListResponse, err error) {
	var _args douyinfavorite.FavoriteServiceFavoriteListArgs
	_args.Request = request
	var _result douyinfavorite.FavoriteServiceFavoriteListResult
	if err = p.c.Call(ctx, "FavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteJudge(ctx context.Context, request *douyinfavorite.DouyinFavoriteJudgeRequest) (r *douyinfavorite.DouyinFavoriteJudgeResponse, err error) {
	var _args douyinfavorite.FavoriteServiceFavoriteJudgeArgs
	_args.Request = request
	var _result douyinfavorite.FavoriteServiceFavoriteJudgeResult
	if err = p.c.Call(ctx, "FavoriteJudge", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteCountUser(ctx context.Context, request *douyinfavorite.DouyinFavoriteCountUserRequest) (r *douyinfavorite.DouyinFavoriteCountUserResponse, err error) {
	var _args douyinfavorite.FavoriteServiceFavoriteCountUserArgs
	_args.Request = request
	var _result douyinfavorite.FavoriteServiceFavoriteCountUserResult
	if err = p.c.Call(ctx, "FavoriteCountUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
