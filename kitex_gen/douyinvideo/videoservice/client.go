// Code generated by Kitex v0.4.4. DO NOT EDIT.

package videoservice

import (
	"context"
	douyinvideo "douyin/kitex_gen/douyinvideo"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	FeedVideo(ctx context.Context, request *douyinvideo.DouyinFeedRequest, callOptions ...callopt.Option) (r *douyinvideo.DouyinFeedResponse, err error)
	PublishVideo(ctx context.Context, request *douyinvideo.DouyinPublishActionRequest, callOptions ...callopt.Option) (r *douyinvideo.DouyinPublishActionResponse, err error)
	PublishListVideo(ctx context.Context, request *douyinvideo.DouyinPublishListRequest, callOptions ...callopt.Option) (r *douyinvideo.DouyinPublishListResponse, err error)
	FavoriteVideoList(ctx context.Context, request *douyinvideo.DouyinFavoriteListRequest, callOptions ...callopt.Option) (r *douyinvideo.DouyinFavoriteListResponse, err error)
	CommentCountUpdate(ctx context.Context, request *douyinvideo.DouyinCommentCountRequest, callOptions ...callopt.Option) (r *douyinvideo.DouyinCommentCountResponse, err error)
	WorkAndFavoriteCount(ctx context.Context, request *douyinvideo.Douyin_Work_And_Favorite_CountRequest, callOptions ...callopt.Option) (r *douyinvideo.Douyin_Work_And_Favorite_CountResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kVideoServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kVideoServiceClient struct {
	*kClient
}

func (p *kVideoServiceClient) FeedVideo(ctx context.Context, request *douyinvideo.DouyinFeedRequest, callOptions ...callopt.Option) (r *douyinvideo.DouyinFeedResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FeedVideo(ctx, request)
}

func (p *kVideoServiceClient) PublishVideo(ctx context.Context, request *douyinvideo.DouyinPublishActionRequest, callOptions ...callopt.Option) (r *douyinvideo.DouyinPublishActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PublishVideo(ctx, request)
}

func (p *kVideoServiceClient) PublishListVideo(ctx context.Context, request *douyinvideo.DouyinPublishListRequest, callOptions ...callopt.Option) (r *douyinvideo.DouyinPublishListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PublishListVideo(ctx, request)
}

func (p *kVideoServiceClient) FavoriteVideoList(ctx context.Context, request *douyinvideo.DouyinFavoriteListRequest, callOptions ...callopt.Option) (r *douyinvideo.DouyinFavoriteListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FavoriteVideoList(ctx, request)
}

func (p *kVideoServiceClient) CommentCountUpdate(ctx context.Context, request *douyinvideo.DouyinCommentCountRequest, callOptions ...callopt.Option) (r *douyinvideo.DouyinCommentCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CommentCountUpdate(ctx, request)
}

func (p *kVideoServiceClient) WorkAndFavoriteCount(ctx context.Context, request *douyinvideo.Douyin_Work_And_Favorite_CountRequest, callOptions ...callopt.Option) (r *douyinvideo.Douyin_Work_And_Favorite_CountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.WorkAndFavoriteCount(ctx, request)
}
