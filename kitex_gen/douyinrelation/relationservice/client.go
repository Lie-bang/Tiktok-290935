// Code generated by Kitex v0.4.4. DO NOT EDIT.

package relationservice

import (
	"context"
	douyinrelation "douyin/kitex_gen/douyinrelation"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Action(ctx context.Context, req *douyinrelation.ActionRequest, callOptions ...callopt.Option) (r *douyinrelation.ActionResponse, err error)
	FollowList(ctx context.Context, req *douyinrelation.FollowListRequest, callOptions ...callopt.Option) (r *douyinrelation.FollowListResponse, err error)
	FollowerList(ctx context.Context, req *douyinrelation.FollowerListRequest, callOptions ...callopt.Option) (r *douyinrelation.FollowerListResponse, err error)
	FriendList(ctx context.Context, req *douyinrelation.FriendListRequest, callOptions ...callopt.Option) (r *douyinrelation.FriendListResponse, err error)
	CountFollow(ctx context.Context, req *douyinrelation.CountFollowRequest, callOptions ...callopt.Option) (r *douyinrelation.CountFollowResponse, err error)
	CountFollower(ctx context.Context, req *douyinrelation.CountFollowerRequest, callOptions ...callopt.Option) (r *douyinrelation.CountFollowerResponse, err error)
	IsFollow(ctx context.Context, req *douyinrelation.IsFollowRequest, callOptions ...callopt.Option) (r *douyinrelation.IsFollowResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kRelationServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kRelationServiceClient struct {
	*kClient
}

func (p *kRelationServiceClient) Action(ctx context.Context, req *douyinrelation.ActionRequest, callOptions ...callopt.Option) (r *douyinrelation.ActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Action(ctx, req)
}

func (p *kRelationServiceClient) FollowList(ctx context.Context, req *douyinrelation.FollowListRequest, callOptions ...callopt.Option) (r *douyinrelation.FollowListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowList(ctx, req)
}

func (p *kRelationServiceClient) FollowerList(ctx context.Context, req *douyinrelation.FollowerListRequest, callOptions ...callopt.Option) (r *douyinrelation.FollowerListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowerList(ctx, req)
}

func (p *kRelationServiceClient) FriendList(ctx context.Context, req *douyinrelation.FriendListRequest, callOptions ...callopt.Option) (r *douyinrelation.FriendListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FriendList(ctx, req)
}

func (p *kRelationServiceClient) CountFollow(ctx context.Context, req *douyinrelation.CountFollowRequest, callOptions ...callopt.Option) (r *douyinrelation.CountFollowResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CountFollow(ctx, req)
}

func (p *kRelationServiceClient) CountFollower(ctx context.Context, req *douyinrelation.CountFollowerRequest, callOptions ...callopt.Option) (r *douyinrelation.CountFollowerResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CountFollower(ctx, req)
}

func (p *kRelationServiceClient) IsFollow(ctx context.Context, req *douyinrelation.IsFollowRequest, callOptions ...callopt.Option) (r *douyinrelation.IsFollowResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.IsFollow(ctx, req)
}
