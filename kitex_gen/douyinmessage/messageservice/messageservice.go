// Code generated by Kitex v0.4.4. DO NOT EDIT.

package messageservice

import (
	"context"
	douyinmessage "douyin/kitex_gen/douyinmessage"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return messageServiceServiceInfo
}

var messageServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MessageService"
	handlerType := (*douyinmessage.MessageService)(nil)
	methods := map[string]kitex.MethodInfo{
		"ChatRecord":       kitex.NewMethodInfo(chatRecordHandler, newMessageServiceChatRecordArgs, newMessageServiceChatRecordResult, false),
		"SendMessage":      kitex.NewMethodInfo(sendMessageHandler, newMessageServiceSendMessageArgs, newMessageServiceSendMessageResult, false),
		"GetFirstMessages": kitex.NewMethodInfo(getFirstMessagesHandler, newMessageServiceGetFirstMessagesArgs, newMessageServiceGetFirstMessagesResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "douyinmessage",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func chatRecordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*douyinmessage.MessageServiceChatRecordArgs)
	realResult := result.(*douyinmessage.MessageServiceChatRecordResult)
	success, err := handler.(douyinmessage.MessageService).ChatRecord(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceChatRecordArgs() interface{} {
	return douyinmessage.NewMessageServiceChatRecordArgs()
}

func newMessageServiceChatRecordResult() interface{} {
	return douyinmessage.NewMessageServiceChatRecordResult()
}

func sendMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*douyinmessage.MessageServiceSendMessageArgs)
	realResult := result.(*douyinmessage.MessageServiceSendMessageResult)
	success, err := handler.(douyinmessage.MessageService).SendMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceSendMessageArgs() interface{} {
	return douyinmessage.NewMessageServiceSendMessageArgs()
}

func newMessageServiceSendMessageResult() interface{} {
	return douyinmessage.NewMessageServiceSendMessageResult()
}

func getFirstMessagesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*douyinmessage.MessageServiceGetFirstMessagesArgs)
	realResult := result.(*douyinmessage.MessageServiceGetFirstMessagesResult)
	success, err := handler.(douyinmessage.MessageService).GetFirstMessages(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceGetFirstMessagesArgs() interface{} {
	return douyinmessage.NewMessageServiceGetFirstMessagesArgs()
}

func newMessageServiceGetFirstMessagesResult() interface{} {
	return douyinmessage.NewMessageServiceGetFirstMessagesResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ChatRecord(ctx context.Context, req *douyinmessage.ChatRecordRequest) (r *douyinmessage.ChatRecordResponse, err error) {
	var _args douyinmessage.MessageServiceChatRecordArgs
	_args.Req = req
	var _result douyinmessage.MessageServiceChatRecordResult
	if err = p.c.Call(ctx, "ChatRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendMessage(ctx context.Context, req *douyinmessage.SendMessageRequest) (r *douyinmessage.SendMessageResponse, err error) {
	var _args douyinmessage.MessageServiceSendMessageArgs
	_args.Req = req
	var _result douyinmessage.MessageServiceSendMessageResult
	if err = p.c.Call(ctx, "SendMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFirstMessages(ctx context.Context, req *douyinmessage.GetFirstMessagesRequest) (r *douyinmessage.GetFirstMessagesResponse, err error) {
	var _args douyinmessage.MessageServiceGetFirstMessagesArgs
	_args.Req = req
	var _result douyinmessage.MessageServiceGetFirstMessagesResult
	if err = p.c.Call(ctx, "GetFirstMessages", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
