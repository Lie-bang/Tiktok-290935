// Code generated by hertz generator.

package douyinapi

import (
	"context"
	"douyin/cmd/api/biz/model/douyinapi"
	"douyin/cmd/api/biz/mw"
	"douyin/cmd/api/biz/rpc"
	"douyin/kitex_gen/douyincomment"
	"douyin/kitex_gen/douyinfavorite"
	"douyin/kitex_gen/douyinmessage"
	"douyin/kitex_gen/douyinrelation"
	"douyin/kitex_gen/douyinuser"
	"douyin/kitex_gen/douyinvideo"
	"douyin/pkg/consts"
	"douyin/pkg/errno"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	consts2 "github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/hertz-contrib/jwt"
	"log"
	"mime/multipart"
	"strconv"
	"time"
)

// CreateUser .
// @router /douyin/user/register/ [POST]
func CreateUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyinapi.CreateUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err))
		return
	}

	err = rpc.CreateUser(context.Background(), &douyinuser.CreateUserRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err))
		return
	}
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// CheckUser .
// @router /douyin/user/login/ [POST]
func CheckUser(ctx context.Context, c *app.RequestContext) {
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// GetUser .
// @router /douyin/user/ [POST]
func GetUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyinapi.GetUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendUserResponse(c, errno.ConvertErr(err), nil)
		return
	}

	v, _ := c.Get(consts.IdentityKey)
	uUser, err := rpc.GerUser(context.Background(), &douyinuser.GetUserRequest{
		UserId:   v.(*douyinapi.User).ID,
		ToUserId: req.UserID,
	})
	if err != nil {
		SendUserResponse(c, errno.ConvertErr(err), nil)
		return
	}

	user := UserUserToApiUser(uUser)
	SendUserResponse(c, errno.Success, user)
}

// Action .
// @router /douyin/relation/action/ [POST]
func Action(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyinapi.ActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err))
		return
	}

	v, _ := c.Get(consts.IdentityKey)
	err = rpc.Action(context.Background(), &douyinrelation.ActionRequest{
		UserId:     v.(*douyinapi.User).ID,
		ToUserId:   req.ToUserID,
		ActionType: req.ActionType,
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err))
		return
	}

	SendResponse(c, errno.Success)
}

// FollowList .
// @router /douyin/relation/follow/list/ [GET]
func FollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyinapi.FollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendUsersResponse(c, errno.ConvertErr(err), nil)
		return
	}

	v, _ := c.Get(consts.IdentityKey)
	rUsers, err := rpc.FollowList(context.Background(), &douyinrelation.FollowListRequest{
		UserId:   v.(*douyinapi.User).ID,
		ToUserId: req.UserID,
	})
	if err != nil {
		SendUsersResponse(c, errno.ConvertErr(err), nil)
		return
	}

	users := RelationUsersToApiUsers(rUsers)
	SendUsersResponse(c, errno.Success, users)
}

// FollowerList .
// @router /douyin/relation/follower/list/ [GET]
func FollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyinapi.FollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendUsersResponse(c, errno.ConvertErr(err), nil)
		return
	}

	v, _ := c.Get(consts.IdentityKey)
	rUsers, err := rpc.FollowerList(context.Background(), &douyinrelation.FollowerListRequest{
		UserId:   v.(*douyinapi.User).ID,
		ToUserId: req.UserID,
	})
	if err != nil {
		SendUsersResponse(c, errno.ConvertErr(err), nil)
		return
	}

	users := RelationUsersToApiUsers(rUsers)
	SendUsersResponse(c, errno.Success, users)
}

// FriendList .
// @router /douyin/relation/friend/list/ [GET]
func FriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyinapi.FriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendFriendUsersResponse(c, errno.ConvertErr(err), nil)
		return
	}

	v, _ := c.Get(consts.IdentityKey)
	rFriendUsers, err := rpc.FriendList(context.Background(), &douyinrelation.FriendListRequest{
		UserId:   v.(*douyinapi.User).ID,
		ToUserId: req.UserID,
	})
	if err != nil {
		SendFriendUsersResponse(c, errno.ConvertErr(err), nil)
		return
	}

	friendUsers := RelationFriendUsersToApiFriendUsers(rFriendUsers)
	SendFriendUsersResponse(c, errno.Success, friendUsers)
}

// ChatRecord .
// @router /douyin/message/action/ [POST]
func ChatRecord(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyinapi.ChatRecordRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendMessageTestResponse(c, errno.ConvertErr(err), nil)
		return
	}
	v, _ := c.Get(consts.IdentityKey)
	mChatRecord, err := rpc.ChatRecord(context.Background(), &douyinmessage.ChatRecordRequest{
		UserId:   v.(*douyinapi.User).ID,
		ToUserId: req.ToUserID,
	})
	if err != nil {
		SendMessageTestResponse(c, errno.ConvertErr(err), nil)
		return
	}

	chatRecord := MsgMessagesToTestMessages(mChatRecord)
	SendMessageTestResponse(c, errno.Success, chatRecord)
}

// SendMessage .
// @router /douyin/message/chat/ [GET]
func SendMessage(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyinapi.SendMessageRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err))
		return
	}

	v, _ := c.Get(consts.IdentityKey)
	err = rpc.SendMessage(context.Background(), &douyinmessage.SendMessageRequest{
		UserId:     v.(*douyinapi.User).ID,
		ToUserId:   req.ToUserID,
		Content:    req.Content,
		ActionType: req.ActionType,
	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err))
		return
	}

	SendResponse(c, errno.Success)
}

// FeedVideo .
// @router /douyin/feed/ [GET]
func FeedVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyinapi.DouyinFeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts2.StatusBadRequest, err.Error())
		return
	}

	var userId int64
	if req.Token != nil {
		JWTToken, err := mw.JwtMiddleware.ParseTokenString(*req.Token)
		if err != nil {
			SendUserResponse(c, errno.ConvertErr(err), nil)
		}
		claims := jwt.ExtractClaimsFromToken(JWTToken)
		userId = int64(claims[consts.IdentityKey].(float64))
	} else {
		userId = -1
	}

	if req.LastestTime == nil {
		t := time.Now().Unix()
		req.LastestTime = &t
	}
	token := strconv.FormatInt(userId, 10)
	resp, err := rpc.FeedVideo(context.Background(), &douyinvideo.DouyinFeedRequest{
		LastestTime: req.LastestTime,
		Token:       &token,
	})

	c.JSON(consts2.StatusOK, resp)
}

// PublishVideo .
// @router /douyin/publish/action/ [POST]
func PublishVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req multipart.FileHeader

	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts2.StatusBadRequest, err.Error())
		return
	}

	v, _ := c.Get(consts.IdentityKey)
	user_id := v.(*douyinapi.User).ID //这里 v.(douyinapi.User).ID 表示的是当前登录用户的userId

	data, err := c.FormFile("data")
	if err != nil {
		log.Print("read video data failed:", err)
		return
	}

	title := c.PostForm("title")

	dataContent, err := data.Open()
	var byteContainer []byte
	byteContainer = make([]byte, data.Size)
	dataContent.Read(byteContainer)

	resp, err := rpc.PublishVideo(context.Background(), &douyinvideo.DouyinPublishActionRequest{
		Token: strconv.FormatInt(user_id, 10),
		Title: title,
		Data:  byteContainer,
	})

	if err != nil {
		log.Println(err)
		return
	}

	c.JSON(consts2.StatusOK, resp)

}

// PublishListVideo .
// @router /douyin/publish/list/ [GET]
func PublishListVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyinapi.DouyinPublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts2.StatusBadRequest, err.Error())
		return
	}

	v, _ := c.Get(consts.IdentityKey)
	userId := v.(*douyinapi.User).ID //这里 v.(douyinapi.User).ID 表示的是当前登录用户的userId

	resp, err := rpc.PublishListVideo(context.Background(), &douyinvideo.DouyinPublishListRequest{
		UserId: userId,
		Token:  req.Token,
	})

	c.JSON(consts2.StatusOK, resp)
}

// FavoriteAction .
// @router /douyin/favorite/action/ [POST]
func FavoriteAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyinapi.DouyinFavoriteActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts2.StatusBadRequest, err.Error())
		return
	}

	v, _ := c.Get(consts.IdentityKey)
	userid := v.(*douyinapi.User).ID //这里 v.(douyinapi.User).ID 表示的是当前登录用户的userId

	resp, err := rpc.FavoriteAction(context.Background(), &douyinfavorite.DouyinFavoriteActionRequest{
		Token:      strconv.FormatInt(userid, 10),
		VideoId:    req.VideoID,
		ActionType: req.ActionType,
	})

	if err != nil {
		log.Print(err)
	}

	c.JSON(consts2.StatusOK, resp)
}

// FavoriteList .
// @router /douyin/favorite/list/ [GET]
func FavoriteList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyinapi.DouyinFavoriteListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts2.StatusBadRequest, err.Error())
		return
	}

	v, _ := c.Get(consts.IdentityKey)
	user_id := v.(*douyinapi.User).ID //这里 v.(douyinapi.User).ID 表示的是当前登录用户的userId

	resp, err := rpc.FavoriteList(context.Background(), &douyinfavorite.DouyinFavoriteListRequest{
		UserId: user_id,
		Token:  req.Token,
	})

	if err != nil {
		log.Print(err)
	}

	c.JSON(consts2.StatusOK, resp)
}

// CommentAction .
// @router /douyin/comment/action/ [POST]
func CommentAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyinapi.DouyinCommentActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts2.StatusBadRequest, err.Error())
		return
	}

	v, _ := c.Get(consts.IdentityKey)
	userId := v.(*douyinapi.User).ID //这里 v.(douyinapi.User).ID 表示的是当前登录用户的userId

	resp, err := rpc.CommentAction(context.Background(), &douyincomment.DouyinCommentActionRequest{
		Token:       req.Token,
		VideoId:     req.VideoID,
		ActionType:  req.ActionType,
		CommentText: req.CommentText,
		CommentId:   req.CommentID,
	}, userId)

	if err != nil {
		log.Print(err)
	}

	c.JSON(consts2.StatusOK, resp)
}

// CommentList .
// @router /douyin/comment/list/ [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyinapi.DouyinCommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts2.StatusBadRequest, err.Error())
		return
	}

	var userId int64
	if &req.Token != nil {
		JWTToken, err := mw.JwtMiddleware.ParseTokenString(req.Token)
		if err != nil {
			SendUserResponse(c, errno.ConvertErr(err), nil)
		}
		claims := jwt.ExtractClaimsFromToken(JWTToken)
		userId = int64(claims[consts.IdentityKey].(float64))
	} else {
		userId = -1
	}
	fmt.Println(userId)

	resp, err := rpc.CommentList(context.Background(), &douyincomment.DouyinCommentListRequest{
		Token:   req.Token,
		VideoId: req.VideoID,
	})

	if err != nil {
		log.Print(err)
	}

	c.JSON(consts2.StatusOK, resp)
}
